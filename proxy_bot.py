import os
import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.environ["BOT_TOKEN"]
ADMIN_USER_ID = int(os.environ["ADMIN_USER_ID"])

# –î–ª—è Render.com
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
PORT = int(os.environ.get("PORT", 10000))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

def handle_message(update: Update, context: CallbackContext):
    if not update.message or not update.message.text:
        return
        
    user = update.effective_user
    user_id = user.id

    if user_id == ADMIN_USER_ID:
        # –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not update.message.reply_to_message:
            update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")
            return

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
        target_user_id = None
        for uid, data in user_states.items():
            if data.get("admin_message_id") == update.message.reply_to_message.message_id:
                target_user_id = uid
                break

        if not target_user_id:
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        try:
            context.bot.send_message(
                chat_id=target_user_id,
                text=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{update.message.text}"
            )
            update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
        try:
            username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
            user_info = f"üë§ –û—Ç: @{username} (ID: {user_id})"
            message_text = f"{user_info}\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{update.message.text}"

            sent_message = context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=message_text
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí ID —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞
            user_states[user_id] = {
                "admin_message_id": sent_message.message_id,
                "username": username
            }

            update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")

def handle_non_text(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.effective_user and update.effective_user.id != ADMIN_USER_ID:
        update.message.reply_text("‚ùå –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

def error_handler(update: Update, context: CallbackContext):
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Updater –¥–ª—è –≤–µ—Ä—Å–∏–∏ 13.15
        updater = Updater(BOT_TOKEN, use_context=True)
        dispatcher = updater.dispatcher

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        dispatcher.add_handler(MessageHandler(Filters.all & ~Filters.text & ~Filters.command, handle_non_text))
        dispatcher.add_error_handler(error_handler)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        if RENDER_EXTERNAL_HOSTNAME:
            # Production: Render.com —Å webhook
            webhook_url = f"https://{RENDER_EXTERNAL_HOSTNAME}/{BOT_TOKEN}"
            
            logger.info(f"Starting webhook on port {PORT}: {webhook_url}")
            
            updater.start_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=BOT_TOKEN,
                webhook_url=webhook_url
            )
            logger.info("Webhook started successfully!")
        else:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å polling
            logger.info("Starting polling locally...")
            updater.start_polling()
            logger.info("Polling started successfully!")
            
        updater.idle()
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise

if __name__ == "__main__":
    main()
